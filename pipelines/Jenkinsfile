def createProject(project) {
  try {
    openshift.newProject(project)
  } catch (e) {
    echo ("Project ${project} exists, or other error: ${e}")
    echo ("Soldiering on anyway")
  }
}

def createApp(appTemplate, project) {
  echo(sh("pwd; ls -l; ls -l .."))
  echo(sh("env"))
  try {
    openshift.withProject(project) {
      openshift.create(appTemplate, namespace=project)
    }
  } catch (e) {
    echo("Error, assuming app exists, using existing app")
    echo("Error was: ${e}")
    echo("Continuing anyway")
  }
}

node('maven') {
  stage ('build') {
    createApp('https://raw.githubusercontent.com/wanderboessenkool/cicd-demo/master/templates/httpd-dev.json', 'cicd-demo')
    openshiftBuild(buildConfig: 'httpd-example', showBuildLogs: 'true')
  }
  stage ('deploy') {
    openshiftDeploy(deploymentConfig: 'httpd-example')
  }
  stage('test') {
    try {
      openshift.newProject('testing')
    } catch (e) {
      echo ("Project testing exists, or other error: ${e}")
    }
    createProject('testing')
    createApp('https://raw.githubusercontent.com/wanderboessenkool/cicd-demo/master/templates/httpd-test.json', 'testing')
    openshiftTag(namespace: openshift.project(), sourceStream: 'httpd-example', sourceTag: 'latest', destinationNamespace: 'testing', destinationStream: 'httpd-example', destinationTag: 'latest')
    openshiftDeploy(deploymentConfig: 'httpd-example', namespace: 'testing')
  }
}

stage('approval') {
  input('Proceed with deploy to production?')
}

node('maven') {
  stage ('Production') {
    createProject('production')
    createApp('https://raw.githubusercontent.com/wanderboessenkool/cicd-demo/master/templates/httpd-test.json', 'production')
    openshiftTag(namespace: 'testing', sourceStream: 'httpd-example', sourceTag: 'latest', destinationNamespace: 'production', destinationStream: 'httpd-example', destinationTag: 'latest')
    openshiftDeploy(deploymentConfig: 'httpd-example', namespace: 'production')
  }
}
