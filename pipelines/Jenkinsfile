def devTemplate = 'https://raw.githubusercontent.com/wanderboessenkool/cicd-demo/master/templates/httpd-dev.json'
def testTemplate = 'https://raw.githubusercontent.com/wanderboessenkool/cicd-demo/master/templates/httpd-test.json'


pipeline {
  agent any
  stages {
    stage('Ensure BuildConfig exists in cicd-demo') {
      when {
        expression {
          openshift.withCluster() {
            openshift.withProject('cicd-demo') {
              return !openshift.selector('bc/httpd-example').exists();
            }
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject('cicd-demo') {
              openshift.create(openshift.process(devTemplate, "-p NAMESPACE=${openshift.project()}"))
            }
          }
        }
      }
    }
    stage('Build in cicd-demo') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject('cicd-demo') {
              openshift.verbose()
              echo(sh("env"))
              myBuild = openshift.selector('bc/httpd-example').startBuild()
              myBuild.logs()
            }
          }
        }
      }
    }
    stage('Deploy in cicd-demo') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject('cicd-demo') {
              newDeploy = openshift.selector('dc/httpd-example').rollout()
              newDeploy.latest()
            }
          }
        }
      }
    }
    stage('Ensure DeploymentConfig exists in testing') {
      when {
        expression {
          openshift.withCluster() {
            openshift.withProject('testing') {
              return !openshift.selector('dc/httpd-example').exists();
            }
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject('testing') {
              openshift.create(openshift.process(testTemplate, "-p NAMESPACE=${openshift.project()}"))
            }
          }
        }
      }
    }
    stage('Tag image from cicd-demo to testing') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject('cicd-demo') {
              openshift.tag("cicd-demo/httpd-example:latest", "testing/httpd-example:latest")
            }
          }
        }
      }
    }
    stage('Deploy in testing') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject('testing') {
              newDeploy = openshift.selector('dc/httpd-example').rollout()
              newDeploy.latest()
            }
          }
        }
      }
    }
    stage('Ask for approval') {
      steps {
        script {
          openshift.withCluster() {
            input("Deploy to Production?")
          }
        }
      }
    }
    stage('Ensure DeploymentConfig exists in production') {
      when {
        expression {
          openshift.withCluster() {
            openshift.withProject('production') {
              return !openshift.selector('dc/httpd-example').exists();
            }
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject('production') {
              openshift.create(openshift.process(testTemplate, "-p NAMESPACE=${openshift.project()}"))
            }
          }
        }
      }
    }
    stage('Tag image from testing to production') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject('testing') {
              openshift.tag("testing/httpd-example:latest", "production/httpd-example:latest")
            }
          }
        }
      }
    }
    stage('Deploy in production') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject('production') {
              newDeploy = openshift.selector('dc/httpd-example').rollout()
              newDeploy.latest()
            }
          }
        }
      }
    }
  }
}
